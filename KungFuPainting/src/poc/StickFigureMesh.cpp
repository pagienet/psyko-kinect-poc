#include "poc/StickFigureMesh.h"
#include "core/Vertex.h"

namespace psyko
{
	StickFigureMesh::StickFigureMesh(ID3D11Device* device)
		: Mesh(device)
	{
		Init();
	}


	StickFigureMesh::~StickFigureMesh()
	{
	}

	void StickFigureMesh::Init()
	{
		Vertex vertices[NUI_SKELETON_POSITION_COUNT];
		
		for (int i = 0; i < NUI_SKELETON_POSITION_COUNT; ++i) {
			vertices[i].color = float4(1.0, 0.0, 0.0, 1.0);
		}

		unsigned short indices[] =
		{
			NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_SPINE,
			NUI_SKELETON_POSITION_SPINE, NUI_SKELETON_POSITION_SHOULDER_CENTER,
			NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_HEAD,

			NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_SHOULDER_LEFT,
			NUI_SKELETON_POSITION_SHOULDER_LEFT, NUI_SKELETON_POSITION_ELBOW_LEFT,
			NUI_SKELETON_POSITION_ELBOW_LEFT, NUI_SKELETON_POSITION_WRIST_LEFT,
			NUI_SKELETON_POSITION_WRIST_LEFT, NUI_SKELETON_POSITION_HAND_LEFT,

			NUI_SKELETON_POSITION_SHOULDER_CENTER, NUI_SKELETON_POSITION_SHOULDER_RIGHT,
			NUI_SKELETON_POSITION_SHOULDER_RIGHT, NUI_SKELETON_POSITION_ELBOW_RIGHT,
			NUI_SKELETON_POSITION_ELBOW_RIGHT, NUI_SKELETON_POSITION_WRIST_RIGHT,
			NUI_SKELETON_POSITION_WRIST_RIGHT, NUI_SKELETON_POSITION_HAND_RIGHT,

			NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_HIP_LEFT,
			NUI_SKELETON_POSITION_HIP_LEFT, NUI_SKELETON_POSITION_KNEE_LEFT,
			NUI_SKELETON_POSITION_KNEE_LEFT, NUI_SKELETON_POSITION_ANKLE_LEFT,
			NUI_SKELETON_POSITION_ANKLE_LEFT, NUI_SKELETON_POSITION_FOOT_LEFT,

			NUI_SKELETON_POSITION_HIP_CENTER, NUI_SKELETON_POSITION_HIP_RIGHT,
			NUI_SKELETON_POSITION_HIP_RIGHT, NUI_SKELETON_POSITION_KNEE_RIGHT,
			NUI_SKELETON_POSITION_KNEE_RIGHT, NUI_SKELETON_POSITION_ANKLE_RIGHT,
			NUI_SKELETON_POSITION_ANKLE_RIGHT, NUI_SKELETON_POSITION_FOOT_RIGHT
		};

		InitVertexData(vertices, NUI_SKELETON_POSITION_COUNT, sizeof(Vertex), D3D11_USAGE_DYNAMIC, D3D11_CPU_ACCESS_WRITE);
		InitIndexData(indices, 38, DXGI_FORMAT_R16_UINT, D3D11_USAGE_IMMUTABLE, 0);

		topology = D3D11_PRIMITIVE_TOPOLOGY_LINELIST;
	}

	void StickFigureMesh::Update(ID3D11DeviceContext* context, const Vector4* jointPositions)
	{
		D3D11_MAPPED_SUBRESOURCE mappedSubResource;
		context->Map(vertexBuffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mappedSubResource);
		Vertex* vertices = (Vertex*)mappedSubResource.pData;

		for (int i = 0; i < NUI_SKELETON_POSITION_COUNT; ++i) {
			vertices[i].position = float3(jointPositions[i].x, jointPositions[i].y, jointPositions[i].z);			
			vertices[i].normal = float3(0.0, 0.0, 0.0);
			vertices[i].tangent = float3(0.0, 0.0, 0.0);
			vertices[i].bitangent = float3(0.0, 0.0, 0.0);
			vertices[i].uv = float2(0.0, 0.0);
			vertices[i].color = float4(1.0, 0.0, 0.0, 1.0);
		}

		context->Unmap(vertexBuffer, 0);
	}
}